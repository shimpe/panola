TITLE:: Panola
summary:: PAttern NOtation LAnguage
categories:: Utils
related:: Classes/Pbind

DESCRIPTION::
Panola implements a subset of the midi specification language mispel in supercollider.
Mispel is a domain specific language implemented in python 3 for expressive midi generation
See https://github.com/shimpe/expremigen

Mispel elements that are not supported in this supercollider version include:
    - passing animation options (tweening) for the animated properties
    - specifying multiple tracks in one string
    - specifying midi control change messages (e.g. animating pitchbend over time with much finer time resolution than the note events)

A Panola notation string specifies a phrase of notes.
Notenames can be a, b, c, d, e, f, g. Optional note modifiers can be
# for a sharp, x for a double sharp, - for a flat and -- for a double flat.
Notenames also include an optional octave number. The following are all examples of valid notes:

a4, b-3, d, gx2, f#1, d--1

If you do not specify an octave number, the last specified one is reused.

Optionally one can append an underscore with an (inverse) duration value to a note, e.g.
a_4 is a quarter note, whereas a_8 is an eighth note. These are not to be confused with a4 and a8
which are a-notes in the fourth and eighth octave respectively.

If you do not specify a duration value, the last specified one is reused.

The duration value can optionally be extended with dots. Each dot adds half the duration to the specified duration.
E.g. a_4 lasts for 1 quarter note (=2 eighth notes), whereas a_4. lasts for 1.5 quarter notes (3 eighth notes).
Number of dots is remembered until a new duration is specified.

After the dots one can optionally specify a multiplier and a divider. These can be used to specify tuplets.
E.g. "a4_8*2/3 b c5 d c b4 " specifies 6 notes that together form two triplets of eighth notes.
Multiplier and divider are remembered until a new duration is specified.

Notes can be grouped using angular brackets to make chords. The properties of the first note in the chord are used for the complete chord. Properties attached to the second and later notes in the chord (other than octave number and note modifier) are ignored. The following makes a chord of four notes:

code:: "<c4 e4 g c5>" ::

After the dots one can optionally specify additional properties. Currently the following properties are supported:
vol (volume), tempo (tempo), lag (lag), pdur (played duration, aka legato).
Properties come in two variants: animated and fixed. An animated property will vary over the course of time until
a new value for the property is specified. Animated properties are created by including their values in curly brackets {}. A fixed property remains fixed over the course of time until a new value for the property is specified. A fixed property is
specified by enclosing its value in square brackets [].

E.g. here's an example of a crescendo (becoming louder):

code:: "c4\\vol{0.3} d e f g a b c5\\vol{0.9}" ::

In the above example, the c4 starts at volume 0.3 and the phrase ends at volume 0.9.
The volumes of the notes in between gruadually rise so as to get a crescendo.
Note: for now only linear animation is supported.

If on the other hand we would have written:

code:: "c4\\vol[0.3] d e f g a b c5\\vol[0.9]" ::

Then the volume of the notes c4 to b would have remained constant at 0.3, and c5 would have
suddenly had volume 0.9.

Note, as of v0.0.9, Panola also supports using the "@" sign instead of a backslash for indicating properties. So you could also write

code:: "c4@vol[0.3] d e f g a b c5@vol[0.9]" ::

Panola allows you to interpret an valid Panola string by extracting information from it, either as a complete Pbind.
You can ask .asPbind which returns a Pbind that is suitable for use with the supercollider server, or you can ask it
to .asMidiPbind, which returns a Pbind that can communicate with external software/hardware synthesizers over MIDI.

code::
(
~phrase = Panola.new("c d e f g");
~pattern = ~phrase.asPbind(\default); // instrument as parameter
~player = ~pattern.play;
)
::
or, more flexibly, by extracting individual information patterns:

code::
(
~phrase = Panola.new("c d e f g");
~pattern = Pbind(
	\instrument, \default
	\midinote, ~phrase.midinotePattern,
	\amp, ~phrase.volumePattern,
	\dur, ~phrase.durationPattern,
	\legato, ~phrase.pdurPattern,
	\lag, ~phrase.lagPattern,
	\temp, ~phrase.tempoPattern
); // instrument as parameter
~player = ~pattern.play;
)
::

In addition to these predefined properties, you can also use any user defined pattern, e.g.

code::
(
~phrase = Panola.new("c d\\myprop{0.1} e f g a\\myprop{0.6}");
~pattern = ~phrase.customPropertyPattern("myprop"); // extract only myprop as a pattern
~stream = ~pattern.asStream;
10.do({
	| i |
	~stream.next.postln;
});
)
// make a pbind in which the myprop appears as one of the keys, with a default value of 0 for myprop
(
~pbind = ~phrase.asPbind(\default);
~stream = ~pbind.patternpairs[13].asStream;
10.do({
	| i |
	~stream.next.postln;
});
)
// make a pbind in which the myprop appears as one of the keys, with a customized default value of 0.4 for myprop
// (such default values are used if no values for myprop are specified yet, e.g. in the beginning of a Panola string,
//  before any myprop is defined).
(
~pbind = ~phrase.asPbind(\default, custom_property_defaults:Dictionary.newFrom(["myprop", 0.4]));
~stream = ~pbind.patternpairs[13].asStream;
10.do({
	| i |
	~stream.next.postln;
});
)
// make pbind in which only the standard panola keys are included
(
~pbind = ~phrase.asPbind(\default, include_custom_properties:false);
~pbind.patternpairs.postln;
)
::

CLASSMETHODS::

METHOD:: new
creates a new Panola instance

ARGUMENT:: notation
a string containing a valid panola notation string

ARGUMENT:: octave_default
which octave to use if not explicitly specified (default=4)

ARGUMENT:: dur_default
which duration to use if not explicitly specified (default=quarter note)

ARGUMENT:: modifier_default
which note modifier to use if not explicitly specified (default=none)

ARGUMENT:: mult_default
extra multiplier used to specify tuplets (default=1)

ARGUMENT:: div_default
extra divider used to specify tuplets (default=1)

ARGUMENT:: vol_default
volume value to use if not explicitly specified (default=0.5)

ARGUMENT:: playdur_default
legato value to use if not explicitly specified (default=0.9)

ARGUMENT:: lag_default
lag value to use if not explicitly specified(default=0)

ARGUMENT:: tempo_default
tempo value to use if not explicitly specified(default=80 bpm)

returns:: an object from which several patterns can be asked


INSTANCEMETHODS::

METHOD:: asPbind
returns all info in the score as a pattern. All properties are turned into Pbind keys

ARGUMENT:: instrument
the instrument to use in the Pbind

ARGUMENT:: include_custom_properties
a boolean indicating if only the standard fields (tempo, lag, midinote, duration, pdur) should be included,
or if all user defined properties should be included as well

ARGUMENT:: custom_property_defaults
a Dictionary containing default values for properties. These defaults are used as long as no value for the
property is specified in the Panola specification. If you provide a default value for a key, but you never
reference the key in the Panola string, it will not be part of the Pbind that results from calling asPbind.

ARGUMENT:: translate_std_keys
if true (default), key "vol" is translated to \amp and key "pdur" is translated to \legato and key "tempo" is
correctly scaled to be used in a TempoClock

returns:: a Pbind of \type \note

METHOD:: asMidiPbind
returns the info in the score as a pattern that produces midi noteOn/noteOff events. This can be used with external devices.

ARGUMENT:: midiOut
this is an instance of a MIDIOut, already connected to an external software/hardware synth

ARGUMENT:: channel
midi channel (default:0) on which to send the noteOn/noteOff events

ARGUMENT:: include_custom_properties
a boolean indicating if only the standard fields (tempo, lag, midinote, duration, pdur) should be included,
or if all user defined properties should be included as well. In case of midi events, these extra keys most likely
will not have any effect.

ARGUMENT:: custom_property_default
a Dictionary containing default values for properties. These defaults are used as long as no value for the
property is specified in the Panola specification. If you provide a default value for a key, but you never
reference the key in the Panola string, it will not be part of the Pbind that results from calling asPbind.

ARGUMENT:: translate_std_keys
if true (default), key "vol" is translated to \amp and key "pdur" is translated to \legato and key "tempo" is
correctly scaled to be used in a TempoClock

returns:: a Pbind of \type \midi

METHOD:: asPmono
returns the info in the score as a Pmono

ARGUMENT:: instrument
the instrument to use in the Pmono

ARGUMENT:: include_custom_properties
a boolean indicating if only the standard fields (tempo, lag, midinote, duration, pdur) should be included,
or if all user defined properties should be included as well

ARGUMENT:: custom_property_defaults
a Dictionary containing default values for properties. These defaults are used as long as no value for the
property is specified in the Panola specification. If you provide a default value for a key, but you never
reference the key in the Panola string, it will not be part of the Pmono that results from calling asPmono.

ARGUMENT:: translate_std_keys
if true (default), key "vol" is translated to \amp and key "pdur" is translated to \legato and key "tempo" is
correctly scaled to be used in a TempoClock
returns:: a Pmono of \type \note

METHOD:: asPmonoArtic
returns the info in the score as a PmonoArtic

ARGUMENT:: instrument
the instrument to use in the PmonoArtic

ARGUMENT:: include_custom_properties
a boolean indicating if only the standard fields (tempo, lag, midinote, duration, pdur) should be included,
or if all user defined properties should be included as well

ARGUMENT:: custom_property_defaults
a Dictionary containing default values for properties. These defaults are used as long as no value for the
property is specified in the Panola specification. If you provide a default value for a key, but you never
reference the key in the Panola string, it will not be part of the PmonoArtic that results from calling asPmonoArtic.

ARGUMENT:: translate_std_keys
if true (default), key "vol" is translated to \amp and key "pdur" is translated to \legato and key "tempo" is
correctly scaled to be used in a TempoClock
returns:: a PmonoArtic of \type \note

METHOD:: gMODIFIER_DEFAULT
default note modifier

returns:: returns default note modifier in use

METHOD:: volumePattern
volumePattern

returns:: returns a pattern generating the required volume entries

METHOD:: parsed_notation
internal data structure containing parse tree of the panola notation string

returns:: internal data structure containing parse tree of the panola notation string

METHOD:: init_notation
internal helper method to parse the panola notation

ARGUMENT:: notation
string containing valid panola notation

ARGUMENT:: octave_default
wich octave to use by default (4, unless specified differently during .new)

ARGUMENT:: dur_default
which duration to use by default (1/4, unless specified differently during .new)

ARGUMENT:: modifier_default
which modifier to use by default (none)

ARGUMENT:: mult_default
which rhythm multiplier to use by default (1)

ARGUMENT:: div_default
which rhythm divider to use by default (1)

ARGUMENT:: vol_default
which volume to use by default (0.5)

ARGUMENT:: playdur_default
which legato setting to use by default (0.9)

ARGUMENT:: lag_default
which lag to use by default (0)

ARGUMENT:: tempo_default
which tempo to use by default (80 bpm)

returns:: nothing of interest

METHOD:: gPLAYDUR_DEFAULT
default legato value (0.9)

returns:: returns default legato value in use

METHOD:: init_midilookup
internal helper method to create notename to midi number lookup table

returns:: nothing

METHOD:: gDIVIDER_DEFAULT
default duration divider (1)

returns:: default duration divider

METHOD:: gOCTAVE_DEFAULT
default octave (4)

returns:: default octave

METHOD:: gDOTS_DEFAULT
default number of dots (0)

returns:: default number of dots

METHOD:: gTEMPO_DEFAULT
default tempo (80 bpm)

returns:: default tempo

METHOD:: gLAG_DEFAULT
default lag (0)

returns:: default lag

METHOD:: durationPattern
pattern generating the successive durations to realize the notation

returns:: pattern generating the successive durations to realize the notation

METHOD::customPropertyPattern
returns a pattern describing the values of a custom property through the score

ARGUMENT:: customstring
this is the name of the property you're extracting from the score

ARGUMENT:: default
this is the default value for the property

returns:: a pattern


METHOD:: pr_animatedPattern
internal helper method for turning animated properties into pattern

ARGUMENT:: prop_name
string describing name of property in panola notation

ARGUMENT:: default_type
type to use if no type specified

ARGUMENT:: default_propval
value to use if no property value specified

returns:: pattern generating the property values needed to realize the notation string

METHOD:: pdurPattern
pattern generating the successive legato values to realize the notation

returns:: pattern generating the successive legato values to realize the notation

METHOD:: gMULTIPLIER_DEFAULT
default duration multiplier value

returns:: default duration multiplier value

METHOD:: gDURATION_DEFAULT
default duration

returns:: default duration

METHOD:: lagPattern
pattern generating the successive lag values to realize the pattern

returns:: pattern generating the successive lag values to realize the pattern

METHOD:: gVOLUME_DEFAULT
default volume

returns:: default volume

METHOD:: midinotePattern
pattern generating the successsive midi notes to realize the pattern

returns:: pattern generating the successsive midi notes to realize the pattern

METHOD:: notationnotePattern
pattern generating the successive notated notes to realize the pattern (mostly useful for display purposes)

returns:: pattern generating the successive notated notes to realize the pattern

METHOD:: notationdurationPattern
pattern generating the successive notated durations to realize the pattern (mostly useful for display purposes)

returns:: pattern generating the successive notated durations to realize the pattern

METHOD:: tempoPattern
pattern generating the successsive tempo values to realize the pattern

returns:: pattern generating the successsive tempo values to realize the pattern

METHOD:: note_to_midi
internal lookup table

returns:: lookup table to transform note names into midinotes

METHOD:: init
initialization of internal data structures + parsing of notation string

ARGUMENT:: notation
panola string with notation

ARGUMENT:: octave_default
default octave

ARGUMENT:: dur_default
default duration

ARGUMENT:: modifier_default
default modifier

ARGUMENT:: mult_default
default multiplier

ARGUMENT:: div_default
default divider

ARGUMENT:: vol_default
default volume

ARGUMENT:: playdur_default
default legato

ARGUMENT:: lag_default
default lag

ARGUMENT:: tempo_default
default tempo

returns:: internally initialized Panola instance

EXAMPLES::

Using Panola without pattern:

code::
(
p = Panola.new("c4 g4 c4 c4_16\\vol{0.6} e  g\\lag{0} c#5 bx4_8*2/3 g- f5\\lag[2]\\vol{0.1} d--_4 c_4 r\\vol{0.9}");
u = p.notationnotePattern.asStream;
w = p.midinotePattern.asStream;
v = p.durationPattern.asStream;
x = p.notationdurationPattern.asStream;
q = p.volumePattern.asStream;
r = p.lagPattern.asStream;
t = p.pdurPattern.asStream;
14.do({
	("Note: "++u.next++" (midinote "++w.next++")").postln;
	("Duration: "++v.next++" (i.e."++x.next++")").postln;
	("Volume: "++q.next).postln;
	("Lag: "++r.next).postln;
	("Legato: "++t.next).postln;
	"".postln;
});
)
::

Using Panola in a pattern

code::
(
s.waitForBoot({
	p = Panola.new("c4\\vol{0.4}\\pdur[0.9]\\tempo{80} d e c c d e c "
"e\\pdur[1.0] f g_2 e_4 f g_2\\vol{0.8} "
"g_8\\pdur[0.1] a g f e_4\\pdur[0.9] c g_8\\pdur[0.1] a g f e_4\\pdur[0.9] c_4\\tempo{120} "
"c\\tempo[50] g3 c4_2 c_4\\tempo[12.5] g3 c4_2\\vol{0.2}");
	~player = p.asPbind.play;
});
)

or the same, but more verbose:

(
s.waitForBoot({
	p = Panola.new("c4\\vol{0.4}\\pdur[0.9]\\tempo{80} d e c c d e c "
"e\\pdur[1.0] f g_2 e_4 f g_2\\vol{0.8} "
"g_8\\pdur[0.1] a g f e_4\\pdur[0.9] c g_8\\pdur[0.1] a g f e_4\\pdur[0.9] c_4\\tempo{120} "
"c\\tempo[50] g3 c4_2 c_4\\tempo[12.5] g3 c4_2\\vol{0.2}");

	q = Pbind(
		\instrument, \default,
		\midinote, p.midinotePattern,
		\dur, p.durationPattern,
		\amp, p.volumePattern,
		\legato, p.pdurPattern,
		\lag, p.lagPattern,
		\tempo, p.tempoPattern.trace,
	);
	~player = q.play;
});
)
::

Multiple voices: first part of J.S. Bach's bwv784 2-voice invention 13

code::
(
s.waitForBoot({
	var v1 = Panola.new("r_16\\tempo[80]\\pdur[1.0]\\vol{0.7} e4 a c5 b4 e b d5 c_8\\pdur[0.2]\\vol{0.9} e g#4 e5 "
"a4_16\\vol{0.7} e4_16\\pdur[1.0] a c5 b4 e b d5 c_8\\vol{0.9}\\pdur[0.2] a4 r_4\\vol{0.7} "
"r_16 e5\\vol{0.3}\\pdur[1.0] c e a4 c5 e4 g f_8\\vol{0.9}\\pdur[0.2] a\\vol{0.7} d5 f_8.\\vol{0.3} "
"d_16\\pdur[1.0] b4 d5 g4 b d f e_8\\vol{0.9}\\pdur[0.2] g\\vol{0.7} c5 e_8.\\vol{0.3} "
"c5_16\\pdur[1.0] a4 c5 f4_8\\vol{0.9}\\pdur[0.2] d5_8.\\vol{0.3}\\pdur[1.0] b4_16 g b "
"e_8\\vol{0.9}\\pdur[0.2] c5_8.\\vol{0.3}\\pdur[1.0] "
"a4_16 f a d_8\\vol{0.9}\\pdur[0.2] b_8 c5_8 r_8 r_4 ");
	var v2 = Panola.new("a2_8\\tempo[80]\\vol{0.6}\\pdur[0.2] a3_4\\pdur[1.0]\\vol{0.7} g#_8\\vol{0.6} a_16\\pdur[0.2]\\vol{0.7} e3\\pdur[1.0] a c4 b3 e b d4 "
"c_8\\pdur[0.2]\\vol{0.9} a3 g# e a_16\\vol{0.7} e\\pdur[1.0] a c4 b3 e b d4 "
"c_8\\pdur[0.2]\\vol{0.9} a3 c4 a3 "
"d4_16\\vol{0.7} a3\\pdur[1.0] f a d f a2 c3 "
"b2_8\\vol{0.3}\\pdur[0.2] d3 g b_8.\\vol{0.7}\\pdur[1.0] g3_16 e g c e g2 b "
"a_8\\vol{0.3}\\pdur[0.2] c3\\vol{0.6} d_16\\pdur[1.0] f b2 d3 g2_8\\vol[0.7]\\pdur[0.2] b c3_16\\vol{0.7}\\pdur[1.0] e a2 c3 "
"f2_8\\vol{0.3}\\pdur[0.2] d g_16\\vol{0.4} g3\\pdur[1.0] f g c\\vol{0.6}\\pdur[0.2] g\\pdur[1.0] "
"c4 e d g3 d4 f e_8\\vol{0.7}\\pdur[0.2] c ");

	var all = Ppar([v1.asPbind, v2.asPbind], 1);
	~player = all.play;
});
)
::

Driving a synth using custom properties

code::
(
s.waitForBoot({
	var line;

	SynthDef (\sc303 , {  arg  out=0, freq=440, wave=0, ctf=100, res=0.2,
		sus=0, dec=1.0, env=1000, gate=1, vol=0.1;
		var  filEnv, volEnv, waves;
		volEnv =  EnvGen .ar( Env .new([10e-10, 1, 1, 10e-10], [0.01, sus, dec],  'exp' ), gate, doneAction:2);
		filEnv =  EnvGen .ar( Env .new([10e-10, 1, 10e-10], [0.01, dec],  'exp' ), gate);
		waves = [ Saw .ar(freq, volEnv),  Pulse .ar(freq, 0.5, volEnv)];
		Out .ar(out,  RLPF .ar(  Select .ar(wave, waves), ctf + (filEnv * env), res).dup * vol);
	}).add;

	s.sync;

	line = Panola.new(
"a2_16\\wave[0]\\vol{0.05}\\tempo{120}\\res{0.2}\\sus{0}\\env{1000}\\ctf{100} a a a1 a2 a a3 a2 a a a1 a2 a3 a2 b- g\\res{0.05}"
"a2_16\\wave[0] a a a1 a2 a a3\\sus{0.2} a2 a\\ctf{3000} a a1 a2 a3 a2 b- g\\res{0.2}"
"a2_16\\wave[0] a a a1 a2 a a3 a2 a a a1 a2 a3 a2 b- g\\res{0.01}\\sus{0}\\env{10000}\\ctf{10}"
	);
	~player = line.asPbind(\sc303).play;
});
)
::

Complete piece in 4 voices being sent to a Prophet Rev 2 hardware synthesizer.
This makes use of the ScProphetRev2 quark for talking to a Dave Smith Instruments prophet Rev2,
available from https://github.com/shimpe/sc-prophet-rev2.
You can of course use your own initialized MIDIOut object instead.

code::
(
p = ScProphetRev2.new;
p.connect;
fork {
	    var v1 = Panola.new(
"r_2\\tempo[76] "
"a2_4\\pdur[1.0] d3\\pdur[0.3] f#\\pdur[1.0] e\\pdur[0.3] "
"a2\\pdur[1.0] d3\\pdur[0.3] f#\\pdur[1.0] e\\pdur[0.3] "
"a2\\pdur[1.0] d3\\pdur[0.3] f#\\pdur[1.0] e\\pdur[0.3] "
"a2\\pdur[1.0] d3\\pdur[0.3] f#\\pdur[1.0] e\\pdur[0.3] "
"g3_8*5\\pdur[1.0] f#_8 g\\pdur[0.3] g "
"f# f# g g "
"g3_8*5\\pdur[1.0] f#_8 g\\pdur[0.3] g "
"f# f# g g "
"r_2 "
"a2_4\\pdur[1.0] d3\\pdur[0.3] f#\\pdur[1.0] e\\pdur[0.3] "
"a2\\pdur[1.0] d3\\pdur[0.3] f#\\pdur[1.0] e\\pdur[0.3] "
"a2\\pdur[1.0] d3\\pdur[0.3] f#\\pdur[1.0] e\\pdur[0.3] "
"a2\\pdur[1.0] d3\\pdur[0.3] f#\\pdur[1.0] e\\pdur[0.3] "
"g3_8*5\\pdur[1.0] f#_8 g\\pdur[0.3] g "
"f# f# g g "
"g3_8*5\\pdur[1.0] f#_8 g\\pdur[0.3] g "
"f# f# g g "
"g f# g g f# f# g g "
"g f# g g f# f# g g "
"r_2 "
"a2_4\\pdur[1.0] d3\\pdur[0.3] f#\\pdur[1.0] e\\pdur[0.3] "
"a2\\pdur[1.0] d3\\pdur[0.3] f#\\pdur[1.0] e\\pdur[0.3] "
"a2\\pdur[1.0] d3\\pdur[0.3] f#\\pdur[1.0] e\\pdur[0.3] "
"a2\\pdur[1.0] d3\\pdur[0.3] f#\\pdur[1.0] e\\pdur[0.3] "
"a2\\pdur[1.0] d3\\pdur[0.3] f#\\pdur[1.0] e\\pdur[0.3] "
"a2\\pdur[1.0] d3\\pdur[0.3] f#\\pdur[1.0] e\\pdur[0.3] "
	    );
	    var v2 = Panola.new(
"r_2 "
"r  "
"r  "
"r_4 f#3\\pdur[1.0] a3_2 "
"r_4 f#3\\pdur[1.0] a3_2 "
"r_4 f#3\\pdur[1.0] a3_2 "
"b-3_8*5 a_8 b- b- a a b- b- "
"b-3_8*5 a_8 b- b- a a b- b- "
"r_2 "
"r  "
"r  "
"r_4 f#3\\pdur[1.0] a3_2 "
"r_4 f#3\\pdur[1.0] a3_2 "
"r_4 f#3\\pdur[1.0] a3_2 "
"b-3_8*5 a_8 b- b- a a b- b- "
"b-3_8*5 a_8 b- b- a a b- b- "
"b- a b- b- a a b- b- "
"b- a b- b- a a b- b- "
"r_2 "
"r  "
"r  "
"r_4 f#3\\pdur[1.0] a3_2 "
"r_4 f#3\\pdur[1.0] a3_2 "
"r_4 f#3\\pdur[1.0] a3_2 "
"r_4 f#3\\pdur[1.0] a3_2 "
"r_4 f#3\\pdur[1.0] a3_2 "
	    );
	    var v3 = Panola.new(
"r_2 "
"r_2 "
"r_2 "
"r_2 "
"r_2 "
"r_8 d4_8 e_4. d_8 e_4 "
"r_8 d4_8 e_4. d_8 e_4 "
"d4_8*5 c#_8 d d c# c# d d "
"d4_8*5 c#_8 d d c# c# d d "
"r_2 "
"r_2 "
"r_2 "
"r_2 "
"r_2 "
"r_8 d4_8 e_4. d_8 e_4 "
"r_8 d4_8 e_4. d_8 e_4 "
"d4_8*5 c#_8 d d c# c# d d "
"d4_8*5 c#_8 d d c# c# d d "
"d4_8 c# d d c# c# d d "
"d4_8 c# d d c# c# d d "
"r_2 "
"r_2 "
"r_2 "
"r_2 "
"r_2 "
"r_8 d4_8 e_4. d_8 e_4 "
"r_8 d4_8 e_4. d_8 e_4 "
"r_8 d4_8 e_4. d_8 e_4*5 "
	);
	    var v4 = Panola.new(
"r_2*7 "
"a4_4 a_8 f#_16 g a_8 f# e e "
"g4_8 g g e a f# d d "
"r_2 "
"g4_8 g g e a f# d d "
"r_2 "
"r_2*7 "
"a4_4 a_8 f#_16 g a_8 f# e e "
"g4_8 g g e a f# d d "
"r_2 "
"g4_8 g g e a f# d d "
"r_2 "
"r_2*11 "
"a4_4 a_8 f#_16 g a_8 f# e e "
"r_2*5 "
	    );
		1.wait;
	    Ppar([v1.asMidiPbind(p.midi_out),v2.asMidiPbind(p.midi_out),
		v3.asMidiPbind(p.midi_out),v4.asMidiPbind(p.midi_out)],1).play;
}
)
::
