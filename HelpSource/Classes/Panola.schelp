TITLE:: Panola
summary:: supercollider pattern notation language
categories:: Midi Utils
related:: Classes/Pattern, Classes/Pbind, Classes/Pbindf, Classes/Pmono, Classes/PmonoArtic, Classes/Pseq

DESCRIPTION::
Panola implements a subset of the midi specification language mispel in supercollider.
Mispel is a domain specific language implemented in python 3 for expressive midi generation
See https://github.com/shimpe/expremigen

Mispel elements that are not supported in this supercollider version include:
tree::
## passing animation options (tweening) for the animated properties
## specifying multiple tracks in one string
## specifying midi control change messages (e.g. animating pitchbend over time with much finer time resolution than the note events)
::

A Panola notation string specifies a phrase of notes.
Notenames can be a, b, c, d, e, f, g. Optional note modifiers can be
# for a sharp, x for a double sharp, - for a flat and -- for a double flat.
Notenames also include an optional octave number. The following are all examples of valid notes:

a4, b-3, d, gx2, f#1, d--1

If you do not specify an octave number, the last specified one is reused.

Optionally one can append an underscore with an (inverse) duration value to a note, e.g.
a_4 is a quarter note, whereas a_8 is an eighth note. These are not to be confused with a4 and a8
which are a-notes in the fourth and eighth octave respectively.

If you do not specify a duration value, the last specified one is reused.

The duration value can optionally be extended with dots. Each dot adds half the duration to the specified duration.
E.g. a_4 lasts for 1 quarter note (=2 eighth notes), whereas a_4. lasts for 1.5 quarter notes (3 eighth notes).
Number of dots is remembered until a new duration is specified.

After the dots one can optionally specify a multiplier and a divider. These can be used to specify tuplets.
E.g. "a4_8*2/3 b c5 d c b4 " specifies 6 notes that together form two triplets of eighth notes.
Multiplier and divider are remembered until a new duration is specified.

Notes can be grouped using angular brackets to make chords. The properties of the first note in the chord are used for the complete chord. Properties attached to the second and later notes in the chord (other than octave number and note modifier) are ignored. The following makes a chord of four notes:

code:: "<c4 e4 g c5>" ::

Please see the example code at the bottom for more advanced usage.




INSTANCEMETHODS::

METHOD:: parsed_notation
	notes and chords together with their properties extracted from the panola string
	

returns:: a list
METHOD:: note_to_midi
	a lookup table converting a note + octave string into a midi note number
	

returns:: a Dictionary
METHOD:: gOCTAVE_DEFAULT
	the default octave of a note, in case no octave was ever specified in one of the previous notes
	(typically "4")
	

returns:: a string
METHOD:: gDURATION_DEFAULT
	the default duration of a note in beats, in case no duration was ever specified in one of the previous notes (typically "4")
	

returns:: a string
METHOD:: gMODIFIER_DEFAULT
	default modifier (sharp, flat, double sharp or double flat) of a note - typically the empty string
	

returns:: a string
METHOD:: gMULTIPLIER_DEFAULT
	default duration multiplier of a note (typically "1")
	

returns:: a string
METHOD:: gDIVIDER_DEFAULT
	default duration divider of a note (typically "1")
	

returns:: a string
METHOD:: gVOLUME_DEFAULT
	default volume of a note, between 0 and 1 (typically "0.5")
	

returns:: a string
METHOD:: gPLAYDUR_DEFAULT
	default playdur (indication for legato/staccato) of a note, between 0 and 1 (typically "0.9")
	

returns:: a string
METHOD:: gLAG_DEFAULT
	default lag of a note (typically "0")
	

returns:: a string
METHOD:: gDOTS_DEFAULT
	default number of dots after a note (typically an empty string) - like in traditional notation a dot adds half of the duration to the specified duration. Multiple dots are supported too.
	

returns:: a string
METHOD:: gTEMPO_DEFAULT
	default tempo (typically 80 bpm) - note that tempo is a special key in that it influences the tempo of the complete system (so all other voices running in parallel are affected too). For this reason, when deriving supercollider patterns from panola strings, the inclusion of the tempo-key is made optional.
	

returns:: a string
METHOD:: customProperties
	a lookup table containing all properties specified in the panola input string
	

returns:: a Dictionary
METHOD:: pr_unroll_cleanup
one of a few internal functions to cleanup the panola input string before starting parsing; this one will clean up whitespaces around brackets, part of the repetitiion syntax.

ARGUMENT:: txt
a valid panola input string

returns:: a cleaner valid panola input string
METHOD:: pr_unroll_checksyntax
internal function to check if there are equally many opening brackets as closing brackets

ARGUMENT:: txt
a valid panola input string

returns:: a boolean
METHOD:: pr_unroll_find_inner
internal function to unroll sections with repeat syntax into a plain panola string

ARGUMENT:: txt
a valid panola input string

returns:: an valid panola input string with the inner repeated section unrolled
METHOD:: pr_unroll
internal function to unroll sections with repeat syntax into a plain panola string

ARGUMENT:: t
a valid panola input string

returns:: an valid panola input string with all repeated sections unrolled
METHOD:: pr_read_token
internal function to return the next token in the panola string

ARGUMENT:: string_so_far
string with all previously read tokens cut off

ARGUMENT:: token_regexp
regexp describing next token that is expected

ARGUMENT:: token_default
default value in case token is not found

ARGUMENT:: semantic_token_action
function that can act on the extracted token

ARGUMENT:: token_not_found_action
function to execute if the token is not found

returns:: the extracted token, and the rest of the string that is not yet parsed
METHOD:: init_notation
internal function to initialize the parsing infrastructure, lookup tables, etc

ARGUMENT:: notation
notation string that is passed in

ARGUMENT:: octave_default
default octave

ARGUMENT:: dur_default
default duration

ARGUMENT:: modifier_default
default modifier (sharp, flat, ...)

ARGUMENT:: mult_default
default duration multiplier

ARGUMENT:: div_default
default duration divider

ARGUMENT:: vol_default
default volume

ARGUMENT:: playdur_default
default playdur (legato/staccato)

ARGUMENT:: lag_default
default lag

ARGUMENT:: tempo_default
default tempo

returns:: after running this function, the panola string is internally unrolled and parsed
METHOD:: unroll_loops
internal function to clean up a panola input string; this function has a misleading name, it currently only removes some spaces and in fact seems to mostly duplicate pr_unroll_cleanup (TODO - investigate)

ARGUMENT:: notation
panola input string to be cleaned up

returns:: a cleaned up string
METHOD:: noteToMidi
look up a midi note number for a midi note name

ARGUMENT:: note
midi note name

returns:: an integer
METHOD:: notationnotePattern
extracts from the current panola string a Pseq pattern containing only the note names

returns:: a pattern (Pseq)
METHOD:: getNoOfEvents
extracts from the current panola string the number of events (notes) present in the pattern

returns:: an integer
METHOD:: midinotePattern
extracts from the current panola string a Pseq pattern containing only the midi note numbers corresponding to the notes in the panola string

returns:: a pattern (Pseq)
METHOD:: notationdurationPattern
extracts from the current panola string a Pseq pattern containing only the midi note durations in the form of a string corresponding to the notes in the panola string

returns:: a pattern (Pseq)
METHOD:: durationPattern
extracts from the current panola string a Pseq pattern containing only the midi note durations in the form of numbers corresponding to the durations in beats of the notes in the panola string

returns:: a pattern (Pseq)
METHOD:: totalDuration
total duration in beats of a panola string

returns:: a pattern (Pseq)
METHOD:: numberOfNotesOrChords
number of notes/chords in a panola string

returns:: a pattern (Pseq)
METHOD:: pr_animatedPattern
internal method to return a pattern generating the values of a panola property, also taking into account the defined automations - this is a generic method that is used by practically all other pattern extraction functions

returns:: a pattern (Pseq)
METHOD:: pr_animatedPatternArgs
internal generic method to return a pattern generating the argument values to a panola property, taking into account the defined automations

ARGUMENT:: prop_name
property name for which to generate a pattern (default: vol)

ARGUMENT:: default_type
default animation type (default: fixed, one of fixed/anim)

ARGUMENT:: default_propval
default value of a property that was not yet encountered (default: 0.5)

returns:: a pattern (Pseq) generating the property argument values
METHOD:: volumePattern
method to return a pattern generating the volume values from a panola string, taking into account the defined automations

returns:: a pattern (Pseq) generating the volume values
METHOD:: lagPattern
method to return a pattern generating the lag values from a panola string, taking into account the defined automations

returns:: a pattern (Pseq) generating the lag values
METHOD:: pdurPattern
method to return a pattern generating the pdur (legato/staccato) values from a panola string, taking into account the defined automations

returns:: a pattern (Pseq) generating the pdur values
METHOD:: tempoPattern
method to return a pattern generating the tempo values from a panola string, taking into account the defined automations

returns:: a pattern (Pseq) generating the tempo values
METHOD:: customPropertyPattern
method to return a pattern generating a user defined property's values from a panola string, taking into account the defined automations

ARGUMENT:: customstring
name of the property

ARGUMENT:: default
default value of the property if not specified explicitly

returns:: a pattern (Pseq) generating the customProperty values
METHOD:: customPropertyPatternArgs
method to return a pattern generating a user defined property's argument values from a panola string, taking into account the defined automations

ARGUMENT:: customstring
name of the property

ARGUMENT:: default
default value of the property if not specified explicitly

returns:: a pattern (Pseq) generating the customProperty argument values
METHOD:: asPbind
method to return a pattern generating all the properties in the panola string; intended for using with supercollider synths

ARGUMENT:: instrument
name of the synthdef to use in the pattern's \instrument key

ARGUMENT:: include_custom_properties
boolean to indicate if the pattern should contain user defined properties as well; if set to false only properties \instrument, \midinote, \dur, \lag, \legato, \amp and optionally \tempo are extracted

ARGUMENT:: custom_property_defaults
a Dictionary specifying default values for used defined properties

ARGUMENT:: translate_std_keys
a boolean to indicate that for certain standard keys like \tempo, a transformation takes place to convert it into a number that can be passed into a tempoclock; the key \vol is translated to \amp in the pattern and the key \pdur is translated into \legato. The existence of these translations is caused by wanting to keep backward compatibility with the python expremigen library

ARGUMENT:: include_tempo
a boolean to indicate if tempo should be part of the Pbind. Note that the tempo key modifies the TempoClock and therefore influences all voices playing on that same TempoClock in the system (which may not be desired...)

returns:: a pattern (Pbind) realizing the panola string
METHOD:: asMidiPbind
method to return a pattern suitable for communication to an external synth generating all the properties in the panola string

ARGUMENT:: midiOut
a MIDIOut instance used to communicate with a hardware synth

ARGUMENT:: channel
a midi channel number

ARGUMENT:: include_custom_properties
boolean to indicate if the pattern should contain user defined properties as well; if set to false only properties \instrument, \midinote, \dur, \lag, \legato, \amp and optionally \tempo are extracted

ARGUMENT:: custom_property_defaults
a Dictionary specifying default values for used defined properties

ARGUMENT:: translate_std_keys
a boolean to indicate that for certain standard keys like \tempo, a transformation takes place to convert it into a number that can be passed into a tempoclock; the key \vol is translated to \amp in the pattern and the key \pdur is translated into \legato. The existence of these translations is caused by wanting to keep backward compatibility with the python expremigen library

ARGUMENT:: include_tempo
a boolean to indicate if tempo should be part of the Pbind. Note that the tempo key modifies the TempoClock and therefore influences all voices playing on that same TempoClock in the system (which may not be desired...)

returns:: a pattern (Pbind) realizing the panola string
METHOD:: asPmono
method to return a pattern generating all the properties in the panola string; intended for using with supercollider synths

ARGUMENT:: instrument
name of the synthdef to use in the pattern's \instrument key

ARGUMENT:: include_custom_properties
boolean to indicate if the pattern should contain user defined properties as well; if set to false only properties \instrument, \midinote, \dur, \lag, \legato, \amp and optionally \tempo are extracted

ARGUMENT:: custom_property_defaults
a Dictionary specifying default values for used defined properties

ARGUMENT:: translate_std_keys
a boolean to indicate that for certain standard keys like \tempo, a transformation takes place to convert it into a number that can be passed into a tempoclock; the key \vol is translated to \amp in the pattern and the key \pdur is translated into \legato. The existence of these translations is caused by wanting to keep backward compatibility with the python expremigen library

ARGUMENT:: include_tempo
a boolean to indicate if tempo should be part of the Pbind. Note that the tempo key modifies the TempoClock and therefore influences all voices playing on that same TempoClock in the system (which may not be desired...)

returns:: a pattern (Pmono) realizing the panola string
METHOD:: asPmonoArtic
method to return a pattern generating all the properties in the panola string; intended for using with supercollider synths

ARGUMENT:: instrument
name of the synthdef to use in the pattern's \instrument key

ARGUMENT:: include_custom_properties
boolean to indicate if the pattern should contain user defined properties as well; if set to false only properties \instrument, \midinote, \dur, \lag, \legato, \amp and optionally \tempo are extracted

ARGUMENT:: custom_property_defaults
a Dictionary specifying default values for used defined properties

ARGUMENT:: translate_std_keys
a boolean to indicate that for certain standard keys like \tempo, a transformation takes place to convert it into a number that can be passed into a tempoclock; the key \vol is translated to \amp in the pattern and the key \pdur is translated into \legato. The existence of these translations is caused by wanting to keep backward compatibility with the python expremigen library

ARGUMENT:: include_tempo
a boolean to indicate if tempo should be part of the Pbind. Note that the tempo key modifies the TempoClock and therefore influences all voices playing on that same TempoClock in the system (which may not be desired...)

returns:: a pattern (Pmono) realizing the panola string

EXAMPLES::

code::
// Panola is a way to extract Pbind keys from a concise specification.
// This makes it easier to compose "traditional" music with Pbind, with a lot less
// headache trying to keep the different keys in sync
// It's the type of system I've missed since my day one with supercollider.

// First things first. To install Panola:

Quarks.install("https://github.com/shimpe/panola");

// Now you can get the help document by typing ctrl+D with the cursor on the word
// Panola in the next line

Panola.new("a4");

// Let's start with the "Hello world" of Panola: a simple scale.
// The numbers indicate octaves.
// You don't need to repeat octave numbers if they don't change between notes.
(
~ex = Panola.new("c4 d e f g a b c5");
~player = ~ex.asPbind.play;
)

// asPbind takes a synth name as parameter (which defaults to \default).
// So the above is equivalent to
(
~ex = Panola.new("c4 d e f g a b c5");
~player = ~ex.asPbind(\default).play;
)

// instead of calling a single "asPbind" you can also extract all information separately
// like this you have optimal flexibility in what you want to use from Panola
(
~ex = Panola.new("c4 d e f g a b c5");
~pat = Pbind(\instrument, \default,	\midinote, ~ex.midinotePattern,	\dur, ~ex.durationPattern, \amp, ~ex.volumePattern,	\tempo, ~ex.tempoPattern, \lag, ~ex.lagPattern,	\legato, ~ex.pdurPattern);
~player = ~pat.play;
)

// You can make chords using angular brackets. Only note properties of the first
// note in the chord (other than octave number and note modifier (see later)) are
// taken into account.
(
~ex = Panola.new("<c4 e> <e g> <c e g c5>");
~player = ~ex.asPbind.play;
)

// You can use modifiers on the notes:
//                                                                
(
~ex = Panola.new("c4 d- e f# gx a# b-- c5");
~player = ~ex.asPbind.play;
)


// With underscores you can indicate rhythm.
// The last used rhythm value is reused until a new one is specified:
// Here's four quarter notes (_4) followed by four eighth notes (_8).
(
~ex = Panola.new("c4_4 d e f g_8 a b c5");
~player = ~ex.asPbind.play;
)

// You can use one or more dots to extend the length of the rhythm, as in traditional notation.
(
~ex = Panola.new("c4_4. d_8 e_4 f g_16 a_4.. b_4 c5");
~player = ~ex.asPbind.play;
)

// You can also use multipliers and/or dividers to change the length.
// E.g. here we use it to create a note that lasts for three eighths
// (c4_8*3) and to create tuplets (e_8*2/3 f g). Remember that last
// duration/rhythm indication is reused until a new one is specified.
(
~ex = Panola.new("c4_8*3 d_8 e_8*2/3 f g f_16 e f e g_4 b_4 c5");
~player = ~ex.asPbind.play;
)

// You can repeat certain phrases by putting them in brackets and multiply
// them with a number (corresponding to the number of repeats)( )*3
// repeats can be nested
(
~ex = Panola.new("((c4_16 d)*3 (e f)*3)*2 (g a)*3 c5_4");
~player = ~ex.asPbind.play;
)

// Now we come to the animated property system. We can attach properties to the notes and animate them over time.
// For now two types of animation are supported: linear interpolation and fixed value.
// To indicate linear interpolation, use curly brackets {}. E.g. here we let the tempo gradually increase from 80 bpm to 160 bpm:
(
~ex = Panola.new("c4@tempo{80} d e f g a b c5@tempo{160}");
~player = ~ex.asPbind.play;
)

// Different properties can be combined. Here we let the volume go up until the middle of the phrase, then let it go down again,
// while tempo is rising from 80 bpm to 160 bpm.

(
~ex = Panola.new("c4@tempo{80}@vol{0.2} d e f g@vol{0.9} a b c5@tempo{160}@vol{0.2}");
~player = ~ex.asPbind.play;
)

// If you want to use the fixed values, use square brackets instead. You can switch between fixed and animated everytime
// you specify a new property value. In the next example, tempo remains at 80 bpm until we come to note a. At that point,
// it jumps to value 100 bpm and gradually increases to 200.
(
~ex = Panola.new("c4@tempo[80] d e f g a@tempo{100} b c5 d e f g a b c6@tempo{200}");
~player = ~ex.asPbind.play;
)

// Using pdur (think: played duration), we can indicate the difference between staccato and legato.
// Here we slowly evolve from very staccato to very legato:
(
~ex = Panola.new("c4_8@pdur{0.1} d e f g a b c5 d e f g a b c6@pdur{1}");
~player = ~ex.asPbind.play;
)

// Using lag we can modulate lag. This can be a way of creating a rubato feeling.
// Linear interpolation is not ideal for this purpose, but it's better than nothing at the moment.

(
~ex = Panola.new("a5_8@tempo[120]@lag{0} b c6 a5 e d c5 d e c a4 g#4@lag{0.5} "
	"a4_8 b c5 a4 e d c4 d e c a3 g#3 a b c4 d e g# a_2@lag{0}");
~player = ~ex.asPbind.play;
)

// In addition to using predefined properties like tempo and lag, you can also use user
// defined properties, e.g. here we animate a property called "myprop".
(
~phrase = Panola.new("c d@myprop{0.1} e f g a@myprop{0.6}");
~pattern = ~phrase.customPropertyPattern("myprop"); // extract only myprop values as a pattern
~stream = ~pattern.asStream;
10.do({
	| i |
	~stream.next.postln;
});
)
// make a pbind in which the myprop appears as one of the keys, with a default value of 0 for myprop
(
~phrase = Panola.new("c d@myprop{0.1} e f g a@myprop{0.6}");
~pbind = ~phrase.asPbind(\default);
~stream = ~pbind.patternpairs[13].asStream;
10.do({
	| i |
	~stream.next.postln;
});
)
// make a pbind in which the myprop appears as one of the keys, with a customized default value of 0.4 for myprop
// (such default values are used if no values for myprop are specified yet, e.g. in the beginning of a Panola string,
//  before any myprop is defined).
(
~phrase = Panola.new("c d@myprop{0.1} e f g a@myprop{0.6}");
~pbind = ~phrase.asPbind(\default, custom_property_defaults:Dictionary.newFrom(["myprop", 0.4]));
~stream = ~pbind.patternpairs[13].asStream;
10.do({
	| i |
	~stream.next.postln;
});
)
// make pbind in which only the standard panola keys are included
(
~phrase = Panola.new("c d@myprop{0.1} e f g a@myprop{0.6}");
~pbind = ~phrase.asPbind(\default, include_custom_properties:false);
~pbind.patternpairs.postln;
)

// These custom properties can be e.g. used to drive synth arguments
// The 303 synth used below is reused from https://sccode.org/1-4Wy
// which in turn is based on code from Lance J. Putnam
(
s.waitForBoot({
	var line;

	SynthDef (\sc303 , {  arg  out=0, freq=440, wave=0, ctf=100, res=0.2,
		sus=0, dec=1.0, env=1000, gate=1, vol=0.1;
		var  filEnv, volEnv, waves;
		volEnv =  EnvGen .ar( Env .new([10e-10, 1, 1, 10e-10], [0.01, sus, dec],  'exp' ), gate, doneAction:2);
		filEnv =  EnvGen .ar( Env .new([10e-10, 1, 10e-10], [0.01, dec],  'exp' ), gate);
		waves = [ Saw .ar(freq, volEnv),  Pulse .ar(freq, 0.5, volEnv)];
		Out .ar(out,  RLPF .ar(  Select .ar(wave, waves), ctf + (filEnv * env), res).dup * vol);
	}).add;

	s.sync;

	line = Panola.new(
		"a2_16@wave[0]@vol{0.05}@tempo{120}@res{0.2}@sus{0}@env{1000}@ctf{100} a a a1 a2 a a3 a2 a a a1 a2 a3 a2 b- g@res{0.05} "
		"a2_16@wave[0] a a a1 a2 a a3@sus{0.2} a2 a@ctf{3000} a a1 a2 a3 a2 b- g@res{0.2} "
		"a2_16@wave[0] a a a1 a2 a a3 a2 a a a1 a2 a3 a2 b- g@res{0.01}@sus{0}@env{10000}@ctf{10} "
	);
	~player = line.asPbind(\sc303).play;
});

// example of automating a piano sustain pedal
// by using a custom property ped
// (the point being that property "ped" has no special meaning in panola, but we can add the meaning ourself)
// I've chosen argument values 0 - 127 to also allow sending half-pedal values for those pianos that support it
(
var midiout;
var chan = 0;
var pat = ();

if (MIDIClient.initialized.not) { MIDIClient.init; };
midiout = MIDIOut.newByName("INTEGRA-7", "INTEGRA-7 MIDI 1"); // change as needed for your digital piano

pat[\score] = Panola("c4_4@pdur[0.3]@ped[0] e g c5 c4@ped[127] e g c5 c4_4@ped[0] e g c5 ");
pat[\score_withpedalhandling] = Pbindf(
	pat[\score].asMidiPbind(midiout, chan, include_tempo:false),
	\handle, Pfunc {
		| ev |
		midiout.control(ev[\chan], 64, ev[\ped].asInteger);
});

pat[\score_withpedalhandling].play(TempoClock(120/60));
)

::
